dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAL$Category <- "HighValenceLowArousal"
MedianCheck_VLAH<- df_ValLowAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAH$Category <- "LowValenceHighArousal"
MedianCheck_VLAL<- df_ValLowAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAL$Category <- "LowValenceLowArousal"
#Looks good
#Summing up all
MedianCheckAll <- rbind(MedianCheck_VLAL,MedianCheck_VLAH,MedianCheck_VHAL,MedianCheck_VHAH)
#Print first 3 of each category
df_ValHighAroHigh <- filter(df_ValHighAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValHighAroLow <- filter(df_ValHighAroLow,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroHigh <- filter(df_ValLowAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroLow <- filter(df_ValLowAroLow,List %in%  c("1","2","3","4","5","6"))
#All together
Printfriendly <- rbind(df_ValHighAroHigh,df_ValHighAroLow,df_ValLowAroHigh,df_ValLowAroLow)
#All Subeted and clean for only the words  (#Used For Logs - #MICAH-MICAH-MICAH)
ls.str(df_ValHighAroHigh)
df_ValHighAroHigh_1 <- select(df_ValHighAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValHighAroLow_1 <- select(df_ValHighAroLow , Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroHigh_1 <- select(df_ValLowAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroLow_1 <- select(df_ValLowAroLow, Word, List, ValMn, ValSD, AroMn, AroSD)
#Write
#write.csv(df_ValHighAroHigh_1 , "WordList_ValHighAroHigh.csv")
#write.csv(df_ValHighAroLow_1 , "WordList_ValHighAroLow.csv")
#write.csv(df_ValLowAroHigh_1 , "WordList_ValLowAroHigh.csv")
#write.csv(df_ValLowAroLow_1 , "WordList_ValLowAroLow.csv")
View(df)
df <- data
df<- filter(df, Valence_And_Arousal != "0")
#Make sure the count is still the same
count(df$Valence_And_Arousal)
#Subset into the four categories for the 2 by 2 design
df_ValHighAroHigh <- filter(df, Valence_And_Arousal == "ValHighAroHigh")
df_ValHighAroLow  <- filter(df, Valence_And_Arousal == "ValHighAroLow")
df_ValLowAroHigh  <- filter(df, Valence_And_Arousal == "ValLowAroHigh")
df_ValLowAroLow   <- filter(df, Valence_And_Arousal == "ValLowAroLow")
#Order first - so Median will be the same with later permutations
df_ValHighAroHigh <- df_ValHighAroHigh[order(df_ValHighAroHigh$ValMn, df_ValHighAroHigh$AroMn),]
df_ValHighAroLow <- df_ValHighAroLow[order(df_ValHighAroLow$ValMn, df_ValHighAroLow$AroMn),]
df_ValLowAroHigh <- df_ValLowAroHigh[order(df_ValLowAroHigh$ValMn, df_ValLowAroHigh$AroMn),]
df_ValLowAroLow <- df_ValLowAroLow[order(df_ValLowAroLow$ValMn, df_ValLowAroLow$AroMn),]
# Remove samples to a number divisible by 50
df_ValHighAroHigh <- df_ValHighAroHigh[-sample(nrow(df_ValHighAroHigh), 27), ] # From 627 -> 600
df_ValHighAroLow <- df_ValHighAroLow[-sample(nrow(df_ValHighAroLow), 35), ] # From 435 -> 400
df_ValLowAroHigh <- df_ValLowAroHigh[-sample(nrow(df_ValLowAroHigh), 35), ] # From 435 -> 400
df_ValLowAroLow <- df_ValLowAroLow[-sample(nrow(df_ValLowAroLow), 1), ] # From 301 -> 300
#Makign lists within each variable
set.seed(7)
list_1 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:12, replace = FALSE)
list_1 = c(list_1, list)
}
df_ValHighAroHigh$List <- list_1
list_2 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_2 = c(list_2, list)
}
df_ValHighAroLow$List <- list_2
list_3 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_3 = c(list_3, list)
}
df_ValLowAroHigh$List <- list_3
list_4 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:6, replace = FALSE)
list_4 = c(list_4, list)
}
df_ValLowAroLow$List <- list_4
#Doublecheck the median
MedianCheck_VHAH<- df_ValHighAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAH$Category <- "HighValenceHighArousal"
MedianCheck_VHAL<- df_ValHighAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAL$Category <- "HighValenceLowArousal"
MedianCheck_VLAH<- df_ValLowAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAH$Category <- "LowValenceHighArousal"
MedianCheck_VLAL<- df_ValLowAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAL$Category <- "LowValenceLowArousal"
#Looks good
#Summing up all
MedianCheckAll <- rbind(MedianCheck_VLAL,MedianCheck_VLAH,MedianCheck_VHAL,MedianCheck_VHAH)
#Print first 3 of each category
df_ValHighAroHigh <- filter(df_ValHighAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValHighAroLow <- filter(df_ValHighAroLow,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroHigh <- filter(df_ValLowAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroLow <- filter(df_ValLowAroLow,List %in%  c("1","2","3","4","5","6"))
#All together
Printfriendly <- rbind(df_ValHighAroHigh,df_ValHighAroLow,df_ValLowAroHigh,df_ValLowAroLow)
#All Subeted and clean for only the words  (#Used For Logs - #MICAH-MICAH-MICAH)
ls.str(df_ValHighAroHigh)
df_ValHighAroHigh_1 <- select(df_ValHighAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValHighAroLow_1 <- select(df_ValHighAroLow , Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroHigh_1 <- select(df_ValLowAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroLow_1 <- select(df_ValLowAroLow, Word, List, ValMn, ValSD, AroMn, AroSD)
#Write
#write.csv(df_ValHighAroHigh_1 , "WordList_ValHighAroHigh.csv")
#write.csv(df_ValHighAroLow_1 , "WordList_ValHighAroLow.csv")
#write.csv(df_ValLowAroHigh_1 , "WordList_ValLowAroHigh.csv")
#write.csv(df_ValLowAroLow_1 , "WordList_ValLowAroLow.csv")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; library(plyr)
#Set Absolute Path
getwd()
Absolute_Directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(Absolute_Directory)
getwd()
#Going into subfolder with ANEW Data
setwd("./ANEW_Data")
getwd()
data <- read.delim("ANEW2017All.txt", header=TRUE)
data$ValSD <- gsub("[()]", "", data$ValSD)
data$AroSD <- gsub("[()]", "", data$ValSD)
# Chunk 2
ANEW_p1 <- ggplot(data, aes(x = ValMn, y = AroMn, colour="red")) + geom_point() + expand_limits(x=1, y=1) + scale_x_continuous(limits = c(1,9), breaks = c(seq(1,9))) + scale_y_continuous(limits = c(1,9), breaks = c(seq(1,9))) + labs(title = "Affective Norm Ratings from (ANEW) 2017 (A1)", x = "Valence", y = "Arousal")+theme_bw()+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(size=14, face="bold"),axis.title.y = element_text(size=20, face="bold"))+ theme(legend.position = "none")
ANEW_p1
# Chunk 3
#Valence
quantile(data$ValMn, c(.40, .50, .60))
#Arousal
quantile(data$AroMn, c(.40, .50, .60))
cuthigh <- 5.4
cutlow <- 4.6
Valence_And_Arousal <- (ifelse(data$ValMn >= cuthigh & data$AroMn >= cuthigh, 'ValHighAroHigh',
ifelse(data$ValMn >= cuthigh & data$AroMn <= cutlow, 'ValHighAroLow',
ifelse(data$ValMn <= cutlow & data$AroMn >= cuthigh, 'ValLowAroHigh',
ifelse(data$ValMn <= cutlow & data$AroMn <= cutlow, 'ValLowAroLow',
'0')))))
data <- cbind(data,Valence_And_Arousal)
# Calculate count for each bin
count(data$Valence_And_Arousal)
"""
x freq
1              0 1390
2 ValHighAroHigh  627
3  ValHighAroLow  435
4  ValLowAroHigh  435
5   ValLowAroLow  301
"""
# Chunk 4
#Find Median and std
#Subsetting
Medians <- data %>%
select(ValMn,AroMn,Valence_And_Arousal) %>%
group_by(Valence_And_Arousal)
Medians <- as.data.frame(Medians)
data$Valence_And_Arousal <- as_factor(data$Valence_And_Arousal)
SumSum <- data_frame()
#Enter subset
SumSum <- Medians %>%
#Tell R to do function on each factorlevel
dplyr::group_by(Valence_And_Arousal) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), Vsd = sd(ValMn), AMedian = median(AroMn), Asd = sd(AroMn))
#Remove sd and Median value for factorlevel '0'
SumSum <- filter(SumSum, Valence_And_Arousal != "0")
#Final Plot
data1 <- filter(data, Valence_And_Arousal != "0")
data2 <- filter(data, Valence_And_Arousal == "0")
ANEW_p2 <- ggplot(data1, aes(x = ValMn, y = AroMn,col=Valence_And_Arousal)) + geom_point()+ scale_color_manual(values=c("#333333","#AA0000","#ff8383","#2C5AA0","#99b7e3"))  + labs(title = "Affective Norm Ratings from (ANEW) 2017 (A2)", x = "Valence", y = "Arousal") + theme_bw() + geom_point(data = data2,mapping= aes(x = ValMn, y = AroMn),colour = "grey",alpha= 0.2) + expand_limits(x=1, y=1) + scale_x_continuous(limits = c(1,9), breaks = c(seq(1,9))) + scale_y_continuous(limits = c(1,9), breaks = c(seq(1,9)))+ geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian, col="Red", size=2)) + geom_point(data = SumSum,mapping= aes(x = VMedian-Vsd, y = AMedian, col="Red", size=1))+ geom_point(data = SumSum,mapping= aes(x = VMedian+Vsd, y = AMedian, col="Red", size=1)) + geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian-Asd, col="Red", size=1))+  geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian+Asd, col="Red", size=1)) +  geom_segment(data = SumSum,mapping= aes(x = VMedian+Vsd, y = AMedian, xend = VMedian-Vsd, yend = AMedian, colour="Red")) +  geom_segment(data = SumSum,mapping= aes(x = VMedian, y = AMedian+Asd, xend = VMedian, yend = AMedian-Asd, colour="Red")) + theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=14, face="bold"),axis.title.y = element_text(size=20, face="bold"))+ theme(legend.position = "none")
ANEW_p2
# Chunk 5
df <- data
df<- filter(df, Valence_And_Arousal != "0")
#Make sure the count is still the same
count(df$Valence_And_Arousal)
#Subset into the four categories for the 2 by 2 design
df_ValHighAroHigh <- filter(df, Valence_And_Arousal == "ValHighAroHigh")
df_ValHighAroLow  <- filter(df, Valence_And_Arousal == "ValHighAroLow")
df_ValLowAroHigh  <- filter(df, Valence_And_Arousal == "ValLowAroHigh")
df_ValLowAroLow   <- filter(df, Valence_And_Arousal == "ValLowAroLow")
#Order first - so Median will be the same with later permutations
df_ValHighAroHigh <- df_ValHighAroHigh[order(df_ValHighAroHigh$ValMn, df_ValHighAroHigh$AroMn),]
df_ValHighAroLow <- df_ValHighAroLow[order(df_ValHighAroLow$ValMn, df_ValHighAroLow$AroMn),]
df_ValLowAroHigh <- df_ValLowAroHigh[order(df_ValLowAroHigh$ValMn, df_ValLowAroHigh$AroMn),]
df_ValLowAroLow <- df_ValLowAroLow[order(df_ValLowAroLow$ValMn, df_ValLowAroLow$AroMn),]
# Remove samples to a number divisible by 50
df_ValHighAroHigh <- df_ValHighAroHigh[-sample(nrow(df_ValHighAroHigh), 27), ] # From 627 -> 600
df_ValHighAroLow <- df_ValHighAroLow[-sample(nrow(df_ValHighAroLow), 35), ] # From 435 -> 400
df_ValLowAroHigh <- df_ValLowAroHigh[-sample(nrow(df_ValLowAroHigh), 35), ] # From 435 -> 400
df_ValLowAroLow <- df_ValLowAroLow[-sample(nrow(df_ValLowAroLow), 1), ] # From 301 -> 300
#Makign lists within each variable
set.seed(7)
list_1 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:12, replace = FALSE)
list_1 = c(list_1, list)
}
df_ValHighAroHigh$List <- list_1
list_2 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_2 = c(list_2, list)
}
df_ValHighAroLow$List <- list_2
list_3 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_3 = c(list_3, list)
}
df_ValLowAroHigh$List <- list_3
list_4 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:6, replace = FALSE)
list_4 = c(list_4, list)
}
df_ValLowAroLow$List <- list_4
#Doublecheck the median
MedianCheck_VHAH<- df_ValHighAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAH$Category <- "HighValenceHighArousal"
MedianCheck_VHAL<- df_ValHighAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAL$Category <- "HighValenceLowArousal"
MedianCheck_VLAH<- df_ValLowAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAH$Category <- "LowValenceHighArousal"
MedianCheck_VLAL<- df_ValLowAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAL$Category <- "LowValenceLowArousal"
#Looks good
#Summing up all
MedianCheckAll <- rbind(MedianCheck_VLAL,MedianCheck_VLAH,MedianCheck_VHAL,MedianCheck_VHAH)
#Print first 3 of each category
df_ValHighAroHigh <- filter(df_ValHighAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValHighAroLow <- filter(df_ValHighAroLow,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroHigh <- filter(df_ValLowAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroLow <- filter(df_ValLowAroLow,List %in%  c("1","2","3","4","5","6"))
#All together
Printfriendly <- rbind(df_ValHighAroHigh,df_ValHighAroLow,df_ValLowAroHigh,df_ValLowAroLow)
#All Subeted and clean for only the words  (#Used For Logs - #MICAH-MICAH-MICAH)
ls.str(df_ValHighAroHigh)
df_ValHighAroHigh_1 <- select(df_ValHighAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValHighAroLow_1 <- select(df_ValHighAroLow , Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroHigh_1 <- select(df_ValLowAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroLow_1 <- select(df_ValLowAroLow, Word, List, ValMn, ValSD, AroMn, AroSD)
#Write
#write.csv(df_ValHighAroHigh_1 , "WordList_ValHighAroHigh.csv")
#write.csv(df_ValHighAroLow_1 , "WordList_ValHighAroLow.csv")
#write.csv(df_ValLowAroHigh_1 , "WordList_ValLowAroHigh.csv")
#write.csv(df_ValLowAroLow_1 , "WordList_ValLowAroLow.csv")
View(MedianCheck_VHAH)
#Load Library
library(tidyverse)
#Set Absolute Path
getwd()
Absolute_Directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(Absolute_Directory)
getwd()
Meta_Summary_Demo <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
View(Meta_Summary_Demo)
Meta_Summary_Demo <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
unique(Meta_Summary_Demo$SUBJ)
#Drop first coloumn as it was added for no reason
Meta_Summary_Demo <- subset(Meta_Summary_Demo, select = -c(X))
#Format for Jasp (From Wide to Long Format)
library(reshape2)
Jasp <- Meta_Summary_Demo
Jasp <- select(Jasp,meta_d,d,criterion,SUBJ,Valence,LearningTime,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(meta_d,d,criterion,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean))
Final_Jasp_Dataframe <- Jasp
write.csv(Final_Jasp_Dataframe,file = "Final_Jasp_Dataframe_Learning_OnlyValence.csv")
View(Jasp)
#Load Library
library(tidyverse)
#Set Absolute Path
getwd()
Absolute_Directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(Absolute_Directory)
getwd()
Meta_Summary_Demo <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
unique(Meta_Summary_Demo$SUBJ)
View(Meta_Summary_Demo)
Meta_Summary_Demo <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
unique(Meta_Summary_Demo$SUBJ)
#Drop first coloumn as it was added for no reason
Meta_Summary_Demo <- subset(Meta_Summary_Demo, select = -c(X))
Jasp <- Meta_Summary_Demo
Jasp$Valence <- (ifelse(Jasp$Valence == 1, "Y", "N"))
Jasp <- select(Jasp,meta_d,d,criterion,SUBJ,Valence,LearningTime,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(meta_d,d,criterion,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean))
Final_Jasp_Dataframe <- Jasp
write.csv(Final_Jasp_Dataframe,file = "Final_Jasp_Dataframe_Learning_OnlyValence.csv")
Meta_Summary_Demo <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
unique(Meta_Summary_Demo$SUBJ)
#Drop first coloumn as it was added for no reason
Meta_Summary_Demo <- subset(Meta_Summary_Demo, select = -c(X))
Jasp <- Meta_Summary_Demo
Jasp$Valence <- as.numeric(Jasp$Valence)
Jasp <- select(Jasp,Valence,LearningTime,Confidence.mean,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(Confidence.mean,Accuracy.mean))
View(Jasp)
View(Jasp)
Jasp <- Meta_Summary_Demo
View(Jasp)
Jasp$Valence <- as.numeric(Jasp$Valence)
Jasp <- select(Jasp,Valence,LearningTime,Confidence.mean,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(Confidence.mean,Accuracy.mean))
View(Jasp)
Jasp <- Meta_Summary_Demo
Jasp$Valence <- as.numeric(Jasp$Valence)
Jasp <- select(SUBJ,Jasp,Valence,LearningTime,Confidence.mean,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(SUBJ,Confidence.mean,Accuracy.mean))
View(Jasp)
View(Jasp)
Jasp$Valence <- as.numeric(Jasp$Valence)
Jasp <- Meta_Summary_Demo
Jasp$Valence <- as.numeric(Jasp$Valence)
Jasp <- select(SUBJ,Jasp,Valence,LearningTime,Confidence.mean,Accuracy.mean)
Jasp <- select(Jasp,Valence,SUBJ,LearningTime,Confidence.mean,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(SUBJ,Confidence.mean,Accuracy.mean))
View(Jasp)
Jasp <- Meta_Summary_Demo
Jasp <- select(Jasp,meta_d,d,criterion,SUBJ,Valence,LearningTime,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(meta_d,d,criterion,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean))
View(Jasp)
View(Jasp)
Jasp <- Meta_Summary_Demo
Jasp <- select(Jasp,meta_d,d,criterion,SUBJ,Valence,LearningTime,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean)
View(Jasp)
Jasp <- Meta_Summary_Demo
Jasp <- select(Jasp,meta_d,d,criterion,SUBJ,Valence,LearningTime,mratio,Confidence.mean,RT.median,Confidence_RT.median, Accuracy_in_percent, Handedness_R_1,Total_Accepted_Trials,Gender_M_1,Accuracy.mean)
Jasp <- Jasp%>%
pivot_wider(names_from = c(Valence,LearningTime),names_sep = "_",values_from = c(meta_d,d,criterion,mratio,Confidence.mean,Accuracy.mean))
Final_Jasp_Dataframe <- Jasp
write.csv(Final_Jasp_Dataframe,file = "Final_Jasp_Dataframe_Learning_OnlyValence.csv")
#Confidence (Valence over Learning Time)
pp6 <- ggplot(Jasp_Data, aes(x = LearningTime,y = Confidence.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "Confidence") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 1: setup
#Set Absolute Path
getwd()
Absolute_Directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(Absolute_Directory)
getwd()
Jasp_Data <- read.csv("FinalWithOutHeart.csv")
#Loading library
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(tidyr)
library(ggpubr)
library(doBy)
#Plot
#Meta-D
p1 <- ggplot(Jasp_Data, aes(x = Arousal,y = meta_d, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "meta d'") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p1
#D
p2 <- ggplot(Jasp_Data, aes(x = Arousal,y = d, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "d'") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p2
#Mratio
pd <- position_dodge(0.1)
p3 <- ggplot(Jasp_Data, aes(x = Arousal,y = mratio, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "mratio") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p3
#Confidence Mean
p4 <- ggplot(Jasp_Data, aes(x = Arousal,y = Confidence.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Confidence Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p4
#Confidence RT Mean
p5 <- ggplot(Jasp_Data, aes(x = Arousal,y = Confidence_RT.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Confidence RT Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p5
#Accuracy Mean
p6 <- ggplot(Jasp_Data, aes(x = Arousal,y = Accuracy.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Accuracy Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p6
#Accuracy RT Mean
p7 <- ggplot(Jasp_Data, aes(x = Arousal,y = RT.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Accuracy RT Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p7
#Loading library
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(gdtools)
library(svglite)
ggarrange(p6,p4,p7,p3,p1,p2)
ggarrange(p5,p7)
#We may plot a Bayesian Correlation Matrix to explore between-subject correlations in M-ratio between our different task categories, and also together with heart-rate. These analyses would be highly exploratory and at risk of heightened type-II error, and so would only be reported in supplemental results.
#See Jasp Analysis
# Chunk 2
#Set Absolute Path
getwd()
Absolute_Directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(Absolute_Directory)
getwd()
Jasp_Data <- read.csv("FinalWithOutHeart_LearningTime_Or.csv")
#Loading library
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(tidyr)
library(ggpubr)
library(doBy)
#Plot
#Meta-D (Valence over Learning Time)
pp1 <- ggplot(Jasp_Data, aes(x = LearningTime,y = meta_d, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "meta d'") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp1
#D (Valence over Learning Time)
pp2 <- ggplot(Jasp_Data, aes(x = LearningTime,y = d, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "D'") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp2
#Mratio (Valence over Learning Time)
pp3 <- ggplot(Jasp_Data, aes(x = LearningTime,y = mratio, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "mratio") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp3
#ACCURACY (Valence over Learning Time)
pp4 <- ggplot(Jasp_Data, aes(x = LearningTime,y = Accuracy.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "Accuracy") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp4
#RT (Valence over Learning Time)
pp5 <- ggplot(Jasp_Data, aes(x = LearningTime,y = RT.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "RT") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp5
#Confidence (Valence over Learning Time)
pp6 <- ggplot(Jasp_Data, aes(x = LearningTime,y = Confidence.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "Confidence") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp6
ggarrange(pp2,pp4,pp5,pp3,pp1,pp6)
ggarrange(p6,p4,p7,p3,p1,p2)
#Accuracy RT Mean
p7 <- ggplot(Jasp_Data, aes(x = Arousal,y = RT.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Accuracy RT Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p7
+ geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)
#Accuracy RT Mean
p7 <- ggplot(Jasp_Data, aes(x = Arousal,y = RT.mean, group=Valence, color=Valence)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Arousal", y = "Accuracy RT Mean") +theme_bw()+scale_x_continuous(breaks = c(0,1),labels=c("0" = "Low", "1" = "High")) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p7
#Confidence (Valence over Learning Time)
pp6 <- ggplot(Jasp_Data, aes(x = LearningTime,y = Confidence.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "Confidence") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.3,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp6
#Confidence (Valence over Learning Time)
pp6 <- ggplot(Jasp_Data, aes(x = LearningTime,y = Confidence.mean, group=Valence, color=Valence, Shape=Arousal)) + stat_summary(aes(colour=paste("mean",Valence),group=Valence), fun.y=mean, geom="line", size=1,position=position_dodge(0.15))+geom_point(aes(colour=paste("mean",Valence),group=Valence), stat = "summary", fun.y=mean,position=position_dodge(0.15),size=3) + labs(x = "Learning Times", y = "Confidence") +theme_bw()+scale_x_continuous(breaks = c(30,60,90)) + theme(legend.position = "none") + scale_color_manual(values=c("#2C5AA0","#AA0000")) + + geom_errorbar(aes(colour=paste("mean",Valence),group=Valence),stat = "summary", fun.data = mean_se, width = 0.5,position=position_dodge(0.15),size=1)+ theme(plot.title = element_text(size=25, face="bold.italic"),aspect.ratio=1,axis.title.x = element_text(
size=20, face="bold"),axis.text.x = element_text(face = "bold", size = 12),axis.text.y = element_text(face = "bold", size = 12),axis.title.y = element_text(size=20, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
pp6
