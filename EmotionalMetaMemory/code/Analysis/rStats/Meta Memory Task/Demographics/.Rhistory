nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
}}
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_DataframeC$Expected <- ifelse(Individisual_DataframeC$Expected == "right",1,0)
Individisual_DataframeC$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_DataframeC$Expected <- ifelse(Individisual_DataframeC$Expected == "right",1,0)
Individisual_DataframeC$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_DataframeC$Expected <- ifelse(Individisual_DataframeC$Expected == "right",1,0)
Individisual_DataframeC$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
Final_data[i & x] <- output
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
Final_data[i][x] <- output
}}
View(output)
View(output)
View(model)
View(output)
View(stat)
temp_data <- data.frame()
temp_data <- rbind(temp_data,stat[13])
stat <- stat[-c(1:12), ]
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
# Mean values
Value <- summary(output)
stat <- data.frame(mean = Value[["statistics"]][, "Mean"])
stat %<>%
rownames_to_column(var = "name")
stat <- stat[-c(1:12), ]
stat$SUBJ <- i
stat$Cond <- Cond
Final_data <- rbind(Final_data, stat)
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
# Mean values
Value <- summary(output)
stat <- data.frame(mean = Value[["statistics"]][, "Mean"])
stat %<>%
rownames_to_column(var = "name")
stat <- stat[-c(1:12), ]
stat$SUBJ <- i
stat$Cond <- x
Final_data <- rbind(Final_data, stat)
}}
View(Final_data)
#Making a final dataframe for all participant data to be stored within
Final_data <- data.frame()
library(tidyverse) ; library(plyr) ; library(doBy) ; library(ggplot2)
knitr::opts_knit$set(root.dir = setwd('/Users/sebastianscottengen/Google Drev/EmotionalMetaMemory/data/Demographics'))
getwd()
demo_data <- read.csv("Demographics.csv", sep=";")
#Remove participant who didn't show up
demo_data <- filter(demo_data, Participant !="3")
#Median and Standard Deviation - Descriptors for Paper
median(demo_data$Age)
sd(demo_data$Age)
setwd("/Users/sebastianscottengen/Google Drev/EmotionalMetaMemory/data/TaskData/SUBJ Data")
#Make a list of names in Directory
filenames = list.files(pattern = "*.txt") #list of filenames from WD
#Test List
filenames
#Make Empty Dataframe
data = data.frame()
for (i in filenames){ #loop over list of files
#import the current file
file = read.delim(i, header=TRUE,sep = ",")
#Add Subjetline
file$SUBJ <- i
#Make Variable For Conditions
file$Cond <- ifelse(file$Arousal == "High" & file$Valence == "High","A+V+", ifelse(file$Arousal == "High" & file$Valence == "Low", "A+V-", ifelse(file$Arousal == "Low" & file$Valence == "High","A-V+","A-V-")))
# How Many NAs per SUBJ
file$NA_Sum <- sum(is.na(file))
# How Many NAs per SUBJ in Percent
file$NA_Sum_Pre <- file$NA_Sum/600
#How many per category + Precentage per category
file$NA_Cat
file$NA_Cat_Pre
temp_file1 <- subset(file,Cond == "A+V-")
temp_file1$NA_Sum <- sum(is.na(temp_file1))
temp_file1$NA_Sum_Pre <- temp_file1$NA_Sum/150
temp_file2 <- subset(file,Cond == "A-V+")
temp_file2$NA_Sum <- sum(is.na(temp_file2))
temp_file2$NA_Sum_Pre <- temp_file2$NA_Sum/150
temp_file3 <- subset(file,Cond == "A+V+")
temp_file3$NA_Sum <- sum(is.na(temp_file3))
temp_file3$NA_Sum_Pre <- temp_file3$NA_Sum/150
temp_file4 <- subset(file,Cond == "A-V-")
temp_file4$NA_Sum <- sum(is.na(temp_file4))
temp_file4$NA_Sum_Pre <- temp_file4$NA_Sum/150
file$NA_Cat <- ifelse(file$Cond == "A+V-",temp_file1$NA_Sum, ifelse(file$Cond == "A-V+", temp_file2$NA_Sum, ifelse(file$Cond == "A+V+",temp_file3$NA_Sum,temp_file4$NA_Sum)))
file$NA_Cat_Pre <- ifelse(file$Cond == "A+V-",temp_file1$NA_Sum_Pre, ifelse(file$Cond == "A-V+", temp_file2$NA_Sum_Pre, ifelse(file$Cond == "A+V+",temp_file3$NA_Sum_Pre,temp_file4$NA_Sum_Pre)))
#Then Exclude NAs
file <- na.omit(file)
#Something happend to the accuracy-scores of SUBJ 11123 - So we'll try to force them into numerics
#Make Accuracy Scores Numeric
file$Accuracy <- (ifelse(file$Accuracy == "True" | file$Accuracy == "1.0" | file$Accuracy == "1", "1", "0"))
#Bind To Complete Dataframe
data = rbind(data, file[,])
}
#Checking for all 35 participants
unique(data$SUBJ)
#Plotting to get an idea of what to exclude
ggplot(data, aes(x = Cond, y = NA_Cat)) + geom_bar(stat = "summary", fun.y = mean) + facet_wrap(~SUBJ)
#Participants with missing data (i.e. data loss due to technical failures) or insufficient data (fewer than 50 trials in total per condition) will be excluded.
#Checking for Participants with conditions with fewer than 50 trials
subset <- data[which(data[,21]>=0.66),]
#The Low Arousal and Low Valence group (A-V-) for Subject 47284 has below 50 "good" trials and must therefore be excluded
data <- filter(data,SUBJ!="Subject_47542.txt")
unique(data$SUBJ)
#Extra summaries for each participant and each condition for Accuracy, Confidence ReactionTime, ReactionTime and Confidence Scores
list <- list("Confidence_RT","RT","Confidence")
data$Accuracy <- as.numeric(data$Accuracy)
Sum_ACC <- doBy::summaryBy( Accuracy ~ SUBJ|Cond, data = data, FUN = list(mean, median, sd))
Sum_CRT <- doBy::summaryBy( Confidence_RT ~ SUBJ|Cond, data = data, FUN = list(mean, median, sd))
Sum_RT <- doBy::summaryBy( RT ~ SUBJ|Cond, data = data, FUN = list(mean, median, sd))
Sum_C <- doBy::summaryBy( Confidence ~ SUBJ|Cond, data = data, FUN = list(mean, median, sd))
SumSum <- cbind(Sum_C,Sum_CRT,Sum_RT,Sum_ACC)
#Remove Duplicate Subject Coloumns
SumSum <- subset(SumSum, select=which(!duplicated(colnames(SumSum))))
#Making Boxplots of SummaryData
#Confidence
#Plot per Cond
ggplot(SumSum, aes(x=Cond, y=Confidence.mean))+ geom_point(position = position_jitter(width = .15), size = .25) + geom_boxplot(alpha = 0.3, width = .1, colour = "BLACK")+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
#Accuracy
#Plot per Cond
ggplot(SumSum, aes(x=Cond, y=Accuracy.mean))+ geom_point(position = position_jitter(width = .15), size = .25) + geom_boxplot(alpha = 0.3, width = .1, colour = "BLACK")+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
#RT
#Plot per Cond
ggplot(SumSum, aes(x=Cond, y=RT.mean))+ geom_point(position = position_jitter(width = .15), size = .25) + geom_boxplot(alpha = 0.3, width = .1, colour = "BLACK")+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
#Confidence_RT
#Plot per Cond
ggplot(SumSum, aes(x=Cond, y=Confidence_RT.mean))+ geom_point(position = position_jitter(width = .15), size = .25) + geom_boxplot(alpha = 0.3, width = .1, colour = "BLACK")+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
#Making plots of All data
ggplot(data, aes(x=Accuracy, y=Confidence, col=SUBJ))+
geom_smooth(method = "lm", se =F) + facet_wrap(~Cond)+
stat_summary(fun.y=mean, geom="line")
#Trial 2 Count - 1 Participant
trials2counts <- function(stimID, response, rating,nRatings, padAmount = 0,padCells=0){
nR_S1 <- list()
nR_S2 <- list()
if (padAmount == 0){
padAmount = 1/(2*nRatings)}
# S1 responses
for (r in nRatings:1){
cs1 <- 0
cs2 <- 0
for (i in 1:length(stimID)){
s = stimID[i]
x = response[i]
y = rating[i]
if ((s==0) & (x==0) & (y==r)){
(cs1 <- cs1+1)}
if ((s==1) & (x==0) & (y==r)){
(cs2 <- cs2+1)}
}
nR_S1 <- append(nR_S1,cs1)
nR_S2 <- append(nR_S2,cs2)
}
# S2 responses
for (r in 1:nRatings){
cs1 <- 0
cs2 <- 0
for (i in 1:length(stimID)){
s = stimID[i]
x = response[i]
y = rating[i]
if ((s==0) & (x==1) & (y==r)){
(cs1 <- cs1+1)}
if ((s==1) & (x==1) & (y==r)){
(cs2 <- cs2+1)}
}
nR_S1 <- append(nR_S1,cs1)
nR_S2 <- append(nR_S2,cs2)
}
# pad response counts to avoid zeros
nR_S1 <- as.numeric(nR_S1)
nR_S2 <- as.numeric(nR_S2)
if (padCells == 1){
nR_S1 <- lapply(nR_S1,FUN= function(x) x+padAmount)
nR_S2 <- lapply(nR_S2,FUN= function(x) x+padAmount)}
# Combine into lists
newlist <- list(nR_S1,nR_S2)
}
# Estimate metacognitive sensibility (meta d') for individual subject
#To install rJags (https://gist.github.com/casallas/8411082)
## Packages
library(tidyverse)
library(magrittr)
library(reshape2)
library(rjags)
library(coda)
library(lattice)
library(broom)
library(ggpubr)
library(ggmcmc)
#Working Directory Check
getwd()
metad_indiv <- function (nR_S1, nR_S2) {
Tol <- 1e-05
nratings <- length(nR_S1)/2
# Adjust to ensure non-zero counts for type 1 d' point estimate
adj_f <- 1/((nratings)*2)
nR_S1_adj = nR_S1 + adj_f
nR_S2_adj = nR_S2 + adj_f
ratingHR <- matrix()
ratingFAR <- matrix()
for (c in 2:(nratings*2)) {
ratingHR[c-1] <- sum(nR_S2_adj[c:length(nR_S2_adj)]) / sum(nR_S2_adj)
ratingFAR[c-1] <- sum(nR_S1_adj[c:length(nR_S1_adj)]) / sum(nR_S1_adj)
}
t1_index <- nratings
d1 <<- qnorm(ratingHR[(t1_index)]) - qnorm(ratingFAR[(t1_index)])
c1 <<- -0.5 * (qnorm(ratingHR[(t1_index)]) + qnorm(ratingFAR[(t1_index)]))
counts <- t(nR_S1) %>%
cbind(t(nR_S2))
counts <- as.vector(counts)
# Data preparation for model
data <- list(
d1 = d1,
c1 = c1,
counts = counts,
nratings = nratings,
Tol = Tol
)
## Model using JAGS
# Create and update model
model <- jags.model(file = 'Bayes_metad_indiv_R.txt', data = data,
n.chains = 3, quiet=FALSE)
update(model, n.iter=1000)
# Sampling
output <- coda.samples(
model          = model,
variable.names = c("meta_d", "cS1", "cS2"),
n.iter         = 10000,
thin           = 1 )
}
#Making a final dataframe for all participant data to be stored within
Final_data <- data.frame()
#Subset for 1 participant
#Make list of SUBJs
SUBJ_list <- as.list(unique(data$SUBJ))
Condition_list <- as.list(unique(data$Cond))
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
# Mean values
Value <- summary(output)
stat <- data.frame(mean = Value[["statistics"]][, "Mean"])
stat %<>%
rownames_to_column(var = "name")
stat <- stat[-c(1:12), ]
stat$SUBJ <- i
stat$Cond <- x
Final_data <- rbind(Final_data, stat)
}}
#Subset for 1 participant
#Make list of SUBJs
SUBJ_list <- as.list(unique(data$SUBJ))
Condition_list <- as.list(unique(data$Cond))
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Subset_p1_T2C$Expected)
response =  as.list(Subset_p1_T2C$KeyPressed)
rating =    as.list(Subset_p1_T2C$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
# Mean values
Value <- summary(output)
stat <- data.frame(mean = Value[["statistics"]][, "Mean"])
stat %<>%
rownames_to_column(var = "name")
stat <- stat[-c(1:12), ]
stat$SUBJ <- i
stat$Cond <- x
Final_data <- rbind(Final_data, stat)
}}
for (i in SUBJ_list){
for(x in Condition_list){
Individisual_Dataframe <- filter(data,SUBJ==i)
Individisual_Dataframe <- filter(Individisual_Dataframe,Cond==x)
#Format coloumns for numeric values: Left == 0 and Right == 1
Individisual_Dataframe$Expected <- ifelse(Individisual_Dataframe$Expected == "right",1,0)
Individisual_Dataframe$KeyPressed <- ifelse(Individisual_Dataframe$KeyPressed == "right",1,0)
#Using Trial 2 Count for 1 Participant in 1 conditio
stimID =    as.list(Individisual_Dataframe$Expected)
response =  as.list(Individisual_Dataframe$KeyPressed)
rating =    as.list(Individisual_Dataframe$Confidence)
nRatings = 7
newlist = trials2counts(stimID,response,rating,nRatings)
nR_S1 <- unlist(newlist[1], recursive = TRUE, use.names = TRUE)
nR_S2 <- unlist(newlist[2], recursive = TRUE, use.names = TRUE)
# Estimate metacognitive sensibility (meta d') for individual subject
#Using function from earlier block
output <- metad_indiv(nR_S1 = nR_S1, nR_S2 = nR_S2)
#Put uotput inside the final lis
# Mean values
Value <- summary(output)
stat <- data.frame(mean = Value[["statistics"]][, "Mean"])
stat %<>%
rownames_to_column(var = "name")
stat <- stat[-c(1:12), ]
stat$SUBJ <- i
stat$Cond <- x
Final_data <- rbind(Final_data, stat)
}}
#Final_data
Final_data
View(Final_data)
Final_data$Arousal <- ifelse(Final_data$Cond == "A+V+" & Final_data$Cond == "A+V-",1,0)
Final_data$Valence <- ifelse(Final_data$Cond == "A-V+" & Final_data$Cond == "A-V-",1,0)
Plot <- ggplot(Final_data,aes(x=mean, y=Cond, colour=SUBJ)) +
geom_histogram(binwidth = 0.03, fill = "blue", colour = "grey", alpha = 0.5)+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
Plot <- ggplot(Final_data,aes(x=mean, y=Cond, colour=SUBJ)) +
geom_histogram(binwidth = 0.03, fill = "blue", colour = "grey", alpha = 0.5)+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
Plot
Plot <- ggplot(Final_data,aes(x=mean, y=Arousal, colour=SUBJ)) +
geom_histogram(binwidth = 0.03, fill = "blue", colour = "grey", alpha = 0.5)+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
Plot
Plot <- ggplot(Final_data,aes(x=mean, y=Arousal)) +
geom_histogram(binwidth = 0.03, fill = "blue", colour = "grey", alpha = 0.5)+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
Plot
ggplot(Final_data,aes(x=mean, y=Arousal)) +
geom_histogram(binwidth = 0.03, fill = "blue", colour = "grey", alpha = 0.5)+ geom_violin(position = position_nudge(x = .5, y = 0),adjust =0.5, trim = TRUE)
ggplot(Final_data,aes(x=mean, y=Arousal)) +
geom_histogram()
ggplot(Final_data,aes(x=mean, y=Arousal)) + geom_histogram()
View(Final_data)
Final_data$Arousal <- ifelse(Final_data$Cond == "A+V+" | Final_data$Cond == "A+V-",1,0)
Final_data$Valence <- ifelse(Final_data$Cond == "A-V+" | Final_data$Cond == "A-V-",1,0)
ggplot(Final_data,aes(x=Arousal, y=mean)) + geom_histogram()
ggplot(Final_data,aes(x=Arousal, y=mean))
ggplot(Final_data,aes(x=Arousal, y=mean))
