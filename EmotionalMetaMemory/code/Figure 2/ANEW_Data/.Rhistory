mapital <- matrix(nrow = N,ncol = tmax)
# /!\ /!\ CHANGES /!\ /!\ #
#We add a new dataframe for luck
lucky <- matrix(nrow = N,ncol = tmax)
for (i in 1:tmax){
capital <- capital + capital*r
#We calculate z scores, cumulative probabilites and tax rate, as in the previous model
m <- mean(capital)
std <- sd(capital)
z_score <- (capital - m) / std
prob = case_when(
std == 0 ~ .5,
TRUE ~ pnorm(z_score))
tax = ubitax_range[1] + diff(ubitax_range) * prob
#Adding Capitalism
capitalism <- case_when(
prob < 0.8 ~ capitalism_range,
prob >= 0.8 ~ 0.0,
TRUE ~ pnorm(z_score))
poortax <- case_when(
prob <= .5 ~ poortax_range[2] - diff(poortax_range) * prob *2,
prob > .5 ~ 0,
TRUE ~ pnorm(z_score))
#We calculate people's profit according to the usual system developped in earlier models
capital_gains = case_when(
type[,i] == 0 ~ w*people$talent,
type[,i] == 1 ~ ifelse(runif(N) < people$talent,
capital*(people$talent),
0),
type[,i] == -1 ~ ifelse(runif(N) < people$talent,
0,
capital*(people$talent - 1)))
# /!\ /!\ CHANGES /!\ /!\ #
#We calculate people's luck outcome
luck = case_when(
type[,i] == 0 ~ 0,
type[,i] == 1 ~ ifelse(runif(N) < people$talent,
1,
0),
type[,i] == -1 ~ ifelse(runif(N) < people$talent,
0,
-1))
#We calculate people's new capital according to profit and tax rate
capital = case_when(
capital_gains > 0 ~ capital*(1-poortax) + capital_gains * (1-tax)*(1-capitalism),
capital_gains <= 0 ~ capital*(1-poortax) + capital_gains*(1-capitalism))#if one's profit is negative u still get taxed as poor
#We calculate people's new capital according to profit and tax rate
#We calculate the total earnings from the taxes (progressive tax on income and - falt 20% of corporate tax)
government_tax_earnings = sum(case_when(
capital_gains > 0 ~ (capital_gains * (tax))+((capital_gains * (capitalism))*0.2),
capital_gains <= 0 ~ 0))
#We calculate the total earnings from the capitalism (Remembering to subtract corporate tax)
capitalism_earnings = sum(case_when(
capital_gains > 0 ~ ((capital_gains * (capitalism))*0.8),
capital_gains <= 0 ~ 0))
# /!\ /!\ CHANGES /!\ /!\ #
# The Government Tax Earning stay get a 15% subtraction are and a flat UBI rate is given out.
capital = capital + ubi + (((government_tax_earnings/50)*42.5) / N)
#Distribute Capitalism to top 20%
capital = case_when(
prob < 0.8 ~ capital,
prob >= 0.8 ~ capital + (capitalism_earnings /(N*0.2)),
TRUE ~ pnorm(z_score))
mapital[,i] <- capital
lucky[,i] <- luck
}
#Adding a few column for data viz' later on
people <- cbind(people,mapital)
people$condition <- "ubi + capitalism"
people$tax_range <- 0
people$ubi <- ubi
people$Event_Likelihood <- Event_Likelihood
people$w <- w
people$r <- r
people$K <- "Flat"
# /!\ /!\ CHANGES /!\ /!\ #
#We Make rows and coloumns to plot luck
#people$talent2 <- people$talent
#people <- cbind(people,lucky)
return(people)
}
#### RUNS ####
#runs for different values of Event_Likelihoods with a paycheck of w=1 and an interest rate of r=0.1
eco_ubi1_cap <- economy_ubi_cap(10000,80,0.001,1,0.05, ubi = 10,ubitax_range = c(.0, .5))
eco_ubi2_cap <- economy_ubi_cap(10000,80,0.01,1,0.05, ubi = 10,ubitax_range = c(.0, .5))
eco_ubi3_cap <- economy_ubi_cap(10000,80,0.1,1,0.05, ubi = 10,ubitax_range = c(.0, .5))
eco_ubi4_cap <- economy_ubi_cap(10000,80,0.5,1,0.05, ubi = 10,ubitax_range = c(.0, .5))
eco_ubi5_cap <- economy_ubi_cap(10000,80,0.9,1,0.05, ubi = 10,ubitax_range = c(.0, .5))
#Dataframe for Viz
CapUbiViz <- rbind(eco_ubi1_cap,eco_ubi2_cap,eco_ubi3_cap,eco_ubi4_cap,eco_ubi5_cap)
### EXTRA
# POOR Tax + Capitalism
economy_poortax_cap <- function(N,tmax,Event_Likelihood,w,r, capitalism_range = .4, poortax_range = c(.001, .01)){
people <-  as_tibble(matrix(rep(1:N),N,1))
colnames(people) <- c("ID")
people$talent <- rnorm(N,0.6,0.1)
people$Kapital <- rep(10,N)
type <- matrix(sample(c(1,-1,0),
tmax*N,
replace = TRUE,
prob = c(Event_Likelihood/2,Event_Likelihood/2,(1-Event_Likelihood))), nrow = N)
capital <- people$Kapital
mapital <- matrix(nrow = N,ncol = tmax)
# /!\ /!\ CHANGES /!\ /!\ #
#We add a new dataframe for luck
lucky <- matrix(nrow = N,ncol = tmax)
for (i in 1:tmax){
capital <- capital + capital*r
#We calculate z scores and cumulative probabilites, as in the previous model
m <- mean(capital)
std <- sd(capital)
z_score <- (capital - m) / std
prob = case_when(
std == 0 ~ .5,
TRUE ~ pnorm(z_score))
#we calculate the poortaxes you have to pay
#if probability is above the mean, you have no taxes
#if probability is very low, your taxes are close to the higher boundaries
poortax <- case_when(
prob <= .5 ~ poortax_range[2] - diff(poortax_range) * prob *2,
prob > .5 ~ 0,
TRUE ~ pnorm(z_score))
#Adding Capitalism
capitalism <- case_when(
prob < .8 ~ capitalism_range,
prob >= .8 ~ 0.0,
TRUE ~ pnorm(z_score))
#We calculate people's profit according to the usual system developped in earlier models
capital_gains = case_when(
type[,i] == 0 ~ w*people$talent,
type[,i] == 1 ~ ifelse(runif(N) < people$talent,
capital*(people$talent),
0),
type[,i] == -1 ~ ifelse(runif(N) < people$talent,
0,
capital*(people$talent - 1)))
# /!\ /!\ CHANGES /!\ /!\ #
#We calculate people's luck outcome
luck = case_when(
type[,i] == 0 ~ 0,
type[,i] == 1 ~ ifelse(runif(N) < people$talent,
1,
0),
type[,i] == -1 ~ ifelse(runif(N) < people$talent,
0,
-1))
#After caculating people's profit for this time step, you add it to their capital while adding capitalism
capital = case_when(
capital_gains > 0 ~ capital*(1-poortax) + capital_gains *(1-capitalism),
capital_gains <= 0 ~ capital*(1-poortax) + capital_gains *(1-capitalism)) #if one's profit is negative u still get taxed as poor
#We calculate the total earnings from the capitalism (No Tax on Capitalism, as there's no taxsystem setup)
capitalism_earnings = sum(case_when(
capital_gains > 0 ~ capital_gains * (capitalism),
capital_gains <= 0 ~ 0))
#Distribute Capitalism to top 20%
capital = case_when(
prob < .8 ~ capital,
prob >= .8 ~ capital + (capitalism_earnings /(N*0.2)),
TRUE ~ pnorm(z_score))
mapital[,i] <- capital
lucky[,i] <- luck
}
#Adding a few column for data viz' later on
people <- cbind(people,mapital)
people$condition <- "poortax + Capitalism"
people$tax_range <- 0
people$ubi <- 0
people$Event_Likelihood <- Event_Likelihood
people$w <- w
people$r <- r
people$K <- "Flat"
# /!\ /!\ CHANGES /!\ /!\ #
#We Make rows and coloumns to plot luck
#people$talent2 <- people$talent
#people <- cbind(people,lucky)
return(people)
}
#### RUNS ####
#runs for different values of Event_Likelihoods with a paycheck of w=1 and an interest rate of r=0.1
eco_poortax1_cap <- economy_poortax_cap(10000,80,0.001,1,0.05)
eco_poortax2_cap <- economy_poortax_cap(10000,80,0.01,1,0.05)
eco_poortax3_cap <- economy_poortax_cap(10000,80,0.1,1,0.05)
eco_poortax4_cap <- economy_poortax_cap(10000,80,0.5,1,0.05)
eco_poortax5_cap <- economy_poortax_cap(10000,80,0.9,1,0.05)
#Dataframes for Viz
CapPoorViz <- rbind(eco_poortax1_cap,eco_poortax2_cap,eco_poortax3_cap,eco_poortax4_cap,eco_poortax5_cap)
#Make GDP and Growth function
SuperCapital <- function(df, taxlevel, Chances){
datatime<- filter(df, tax_range == taxlevel, Event_Likelihood == Chances)
#print(unique(datatime$tax_range))
#print(unique(datatime$Event_Likelihood))
#print(length(datatime$ID))
#print(colnames(datatime))
datatime1 = datatime[c(3:83)]
#print(colnames(datatime))
GDP = colSums(datatime1)
Growth = c(0,rep(NA,80))
for (i in 2:81){
Growth[i] = (GDP[i]/GDP[i-1] - 1) * 100
}
ecostuff <- cbind(GDP,Growth, taxlevel,Chances)
return(ecostuff)
}
#End Dataframe
ecostuff_final <- data.frame()
GDP <- 0
Growth <- 0
taxlevel <- 0
Chances <- 0
ecostuff_final <- cbind(GDP, Growth, taxlevel, Chances)
ecostuff_final
#Make Lists
Taxielevels = 0.5
ChancieLevels = c(0.001,0.01,0.05,0.5,0.9)
df = CapDistViz
#Loop In Loop
for (c in ChancieLevels){ #loop over list of files
for (t in Taxielevels){ #loop over list of files
cool <- SuperCapital(df, t, c)
cool <- data.frame(cool)
ecostuff_final <- rbind(ecostuff_final,cool)
}}
df = CapDistViz
#Remove First Line
ecostuff_final <- ecostuff_final[-1, ]
view(ecostuff_final)
view(ecostuff_final)
#End Dataframe
ecostuff_final <- data.frame()
GDP <- 0
Growth <- 0
taxlevel <- 0
Chances <- 0
ecostuff_final <- cbind(GDP, Growth, taxlevel, Chances)
ecostuff_final
#Make Lists
Taxielevels = 0.5
ChancieLevels = c(0.001,0.01,0.05,0.5,0.9)
df = CapDistViz
#Loop In Loop
for (c in ChancieLevels){ #loop over list of files
for (t in Taxielevels){ #loop over list of files
cool <- SuperCapital(df, t, c)
cool <- data.frame(cool)
ecostuff_final <- rbind(ecostuff_final,cool)
}}
View(ecostuff_final)
#Remove First Line
ecostuff_final <- ecostuff_final[-1, ]
#End Dataframe
ecostuff_final <- data.frame()
GDP <- 0
Growth <- 0
taxlevel <- 0
Chances <- 0
ecostuff_final <- cbind(GDP, Growth, taxlevel, Chances)
ecostuff_final
#Make Lists
Taxielevels = 0.5
ChancieLevels = c(0.001,0.01,0.1,0.5,0.9)
df = CapDistViz
#Loop In Loop
for (c in ChancieLevels){ #loop over list of files
for (t in Taxielevels){ #loop over list of files
cool <- SuperCapital(df, t, c)
cool <- data.frame(cool)
ecostuff_final <- rbind(ecostuff_final,cool)
}}
#Remove First Line
ecostuff_final <- ecostuff_final[-1, ]
view(ecostuff_final)
ggplot(ecostuff_final, aes(x=Growth,y=GDP, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism for different Event_likelihoods",y="GDP",x="Growth")
g1 <- ggplot(ecostuff_final, aes(x=Growth, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism for different Event_likelihoods",y="GDP",x="Time")
ggplot(ecostuff_final, aes(x=Growth, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism for different Event_likelihoods",y="GDP",x="Time")
list <- rep(1:81, 5)
cbind(ecostuff_final,list)
ecostuff_final2 <- cbind(ecostuff_final,list)
View(ecostuff_final2)
time <- rep(1:81, 5)
ecostuff_final <- cbind(ecostuff_final,time)
g1 <- ggplot(ecostuff_final, aes(x=GDP,y=time, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
g2 <- ggplot(ecostuff_final, aes(x=Growth,y=time, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
View(ecostuff_final)
g1 <- ggplot(ecostuff_final, aes(x=GDP,y=time)) +
geom_line(color=Chances) + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
g2 <- ggplot(ecostuff_final, aes(x=Growth,y=time, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
g1 <- ggplot(ecostuff_final, aes(x=GDP,y=time, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
g2 <- ggplot(ecostuff_final, aes(x=Growth,y=time, color=Chances)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
g2 <- ggplot(ecostuff_final, aes(x=Growth,y=time, color=Chances)) +
geom_point() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
g2 <- ggplot(ecostuff_final, aes(x=Growth,y=time, color=Chances)) +
geom_point() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
colnames(ecostuff_final)[4] <- "Event_likelihood"
View(ecostuff_final)
g1 <- ggplot(ecostuff_final, aes(x=time,y=GDP, color=Event_likelihood)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
g2 <- ggplot(ecostuff_final, aes(x=time,y=Growth, color=Event_likelihood)) +
geom_point() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
plot_grid(g1,g2)
g1 <- ggplot(ecostuff_final, aes(x=time,y=GDP, color=Event_likelihood)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
ggplot(ecostuff_final, aes(x=time,y=GDP, color=Event_likelihood)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
ggplot(ecostuff_final, aes(x=time,y=GDP, color=Event_likelihood)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
ggplot(ecostuff_final, aes(x=time,y=Growth, color=Event_likelihood)) +
geom_point() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="Growth",x="Time")
#### PLOTS ####
#comparing the distribution model to the interest rate one (with fix w = 1 and fix r = 0.1)
ggplot(eco_capvsP, aes(talent,`80`, color=condition)) +
geom_point(alpha=0.15,size=0.1) +
scale_y_continuous(trans='log10')+
facet_grid(~Event_Likelihood)
#### PLOTS ####
#Look at the UBI
ggplot(eco_UBI, aes(talent,`80`, color=ubi)) +
geom_point(alpha=0.15,size=0.1) +
scale_y_continuous(trans='log10')+
facet_grid(~Event_Likelihood)+ labs(title="Distribution of wealth over Talent across different Event_likelihoods",y="Capital/Succes",x="Talent")
ggplot(ecostuff_final, aes(x=time,y=GDP, color=Event_likelihood)) +
geom_line() + labs(title="Wealth Distribution + Capitalism model for different Event_likelihoods",y="GDP",x="Time")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/FlowersnIce-cream/Google Drev/EmotionalMetaMemory/data/WordStimAnalysis/rStat/Data Visualisation")
library(tidyverse) ; library(plyr)
data <- read.delim("ANEW2017All.txt", header=TRUE)
data$ValSD <- gsub("[()]", "", data$ValSD)
data$AroSD <- gsub("[()]", "", data$ValSD)
variance_theme = theme(
text = element_text(size = 14),
#axis.line = element_line(size = 0.7, color = "black"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.title=element_text(size=12),
legend.text=element_text(size=12),
plot.title = element_text(lineheight=.8, face="bold", size = 12, hjust = 0.5),
panel.border = element_rect(size=1),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent"),
legend.position = "none",
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
#Valence
quantile(data$ValMn, c(.40, .50, .60))
#Arousal
quantile(data$AroMn, c(.40, .50, .60))
cuthigh <- 5.4
cutlow <- 4.6
Valence_And_Arousal <- (ifelse(data$ValMn >= cuthigh & data$AroMn >= cuthigh, 'ValHighAroHigh',
ifelse(data$ValMn >= cuthigh & data$AroMn <= cutlow, 'ValHighAroLow',
ifelse(data$ValMn <= cutlow & data$AroMn >= cuthigh, 'ValLowAroHigh',
ifelse(data$ValMn <= cutlow & data$AroMn <= cutlow, 'ValLowAroLow',
'0')))))
data <- cbind(data,Valence_And_Arousal)
# Calculate count for each bin
count(data$Valence_And_Arousal)
"""
x freq
1              0 1390
2 ValHighAroHigh  627
3  ValHighAroLow  435
4  ValLowAroHigh  435
5   ValLowAroLow  301
"""
#OLD CODES
"""
#Quantile on Arousal
ggplot(data, aes(x = ValMn, y = AroMn,col=AroMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(AroHigh~AroLow)
#Quantile on Valence
ggplot(data, aes(x = ValMn, y = AroMn,col=ValMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(ValHigh~ValLow)
#Intersection plots
#ValHigh~AroHigh
ggplot(data, aes(x = ValMn, y = AroMn,col=ValMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(ValHigh~AroHigh)
#ValLow~AroLow
ggplot(data, aes(x = ValMn, y = AroMn,col=ValMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(ValLow~AroLow)
#ValHigh~AroLow
ggplot(data, aes(x = ValMn, y = AroMn,col=ValMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(ValHigh~AroLow)
#ValLow~AroHigh
ggplot(data, aes(x = ValMn, y = AroMn,col=ValMn)) + geom_point() + ylim(min = 1, max = 9) + xlim (min=1, max=9) + facet_wrap(ValLow~AroHigh)
"""
#Find Median and std
#Subsetting
Medians <- data %>%
select(ValMn,AroMn,Valence_And_Arousal) %>%
group_by(Valence_And_Arousal)
Medians <- as.data.frame(Medians)
data$Valence_And_Arousal <- as_factor(data$Valence_And_Arousal)
SumSum <- data_frame()
#Enter subset
SumSum <- Medians %>%
#Tell R to do function on each factorlevel
dplyr::group_by(Valence_And_Arousal) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), Vsd = sd(ValMn), AMedian = median(AroMn), Asd = sd(AroMn))
#Remove sd and Median value for factorlevel '0'
SumSum <- filter(SumSum, Valence_And_Arousal != "0")
#Final Plot
data1 <- filter(data, Valence_And_Arousal != "0")
data2 <- filter(data, Valence_And_Arousal == "0")
ggplot(data1, aes(x = ValMn, y = AroMn,col=Valence_And_Arousal)) + geom_point()  + labs(title = "Affective Norms for English Words (ANEW) 2017", x = "Valence", y = "Arousal") + theme_bw() + variance_theme  + geom_point(data = data2,mapping= aes(x = ValMn, y = AroMn),colour = "grey",alpha= 0.2) + expand_limits(x=1, y=1) + scale_x_continuous(limits = c(1,9), breaks = c(seq(1,9))) + scale_y_continuous(limits = c(1,9), breaks = c(seq(1,9)))+ geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian, col="Red", size=2)) + geom_point(data = SumSum,mapping= aes(x = VMedian-Vsd, y = AMedian, col="Red", size=1))+ geom_point(data = SumSum,mapping= aes(x = VMedian+Vsd, y = AMedian, col="Red", size=1)) + geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian-Asd, col="Red", size=1))+  geom_point(data = SumSum,mapping= aes(x = VMedian, y = AMedian+Asd, col="Red", size=1)) +  geom_segment(data = SumSum,mapping= aes(x = VMedian+Vsd, y = AMedian, xend = VMedian-Vsd, yend = AMedian, colour="Red")) +  geom_segment(data = SumSum,mapping= aes(x = VMedian, y = AMedian+Asd, xend = VMedian, yend = AMedian-Asd, colour="Red"))
df <- data
df<- filter(df, Valence_And_Arousal != "0")
#Make sure the count is still the same
count(df$Valence_And_Arousal)
#Subset into the four categories for the 2 by 2 design
df_ValHighAroHigh <- filter(df, Valence_And_Arousal == "ValHighAroHigh")
df_ValHighAroLow  <- filter(df, Valence_And_Arousal == "ValHighAroLow")
df_ValLowAroHigh  <- filter(df, Valence_And_Arousal == "ValLowAroHigh")
df_ValLowAroLow   <- filter(df, Valence_And_Arousal == "ValLowAroLow")
#Order first - so Median will be the same with later permutations
df_ValHighAroHigh <- df_ValHighAroHigh[order(df_ValHighAroHigh$ValMn, df_ValHighAroHigh$AroMn),]
df_ValHighAroLow <- df_ValHighAroLow[order(df_ValHighAroLow$ValMn, df_ValHighAroLow$AroMn),]
df_ValLowAroHigh <- df_ValLowAroHigh[order(df_ValLowAroHigh$ValMn, df_ValLowAroHigh$AroMn),]
df_ValLowAroLow <- df_ValLowAroLow[order(df_ValLowAroLow$ValMn, df_ValLowAroLow$AroMn),]
# Remove samples to a number divisible by 50
df_ValHighAroHigh <- df_ValHighAroHigh[-sample(nrow(df_ValHighAroHigh), 27), ] # From 627 -> 600
df_ValHighAroLow <- df_ValHighAroLow[-sample(nrow(df_ValHighAroLow), 35), ] # From 435 -> 400
df_ValLowAroHigh <- df_ValLowAroHigh[-sample(nrow(df_ValLowAroHigh), 35), ] # From 435 -> 400
df_ValLowAroLow <- df_ValLowAroLow[-sample(nrow(df_ValLowAroLow), 1), ] # From 301 -> 300
#Makign lists within each variable
set.seed(7)
list_1 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:12, replace = FALSE)
list_1 = c(list_1, list)
}
df_ValHighAroHigh$List <- list_1
list_2 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_2 = c(list_2, list)
}
df_ValHighAroLow$List <- list_2
list_3 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:8, replace = FALSE)
list_3 = c(list_3, list)
}
df_ValLowAroHigh$List <- list_3
list_4 <- matrix(nrow=0,ncol=0)
for (i in 1:50) {
list = sample(1:6, replace = FALSE)
list_4 = c(list_4, list)
}
df_ValLowAroLow$List <- list_4
#Doublecheck the median
MedianCheck_VHAH<- df_ValHighAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VHAL<- df_ValHighAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAH<- df_ValLowAroHigh %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
MedianCheck_VLAL<- df_ValLowAroLow %>%
#Tell R to do function on each factorlevel
dplyr::group_by(List) %>%
#Summarise Median and Std
dplyr::summarise(VMedian = median(ValMn), AMedian = median(AroMn))
#Looks good
#Print first 3 of each category
df_ValHighAroHigh <- filter(df_ValHighAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValHighAroLow <- filter(df_ValHighAroLow,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroHigh <- filter(df_ValLowAroHigh,List %in%  c("1","2","3","4","5","6"))
df_ValLowAroLow <- filter(df_ValLowAroLow,List %in%  c("1","2","3","4","5","6"))
#All together
Printfriendly <- rbind(df_ValHighAroHigh,df_ValHighAroLow,df_ValLowAroHigh,df_ValLowAroLow)
#All Subeted and clean for only the words  (#Used For Logs - #MICAH-MICAH-MICAH)
ls.str(df_ValHighAroHigh)
df_ValHighAroHigh_1 <- select(df_ValHighAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValHighAroLow_1 <- select(df_ValHighAroLow , Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroHigh_1 <- select(df_ValLowAroHigh, Word, List, ValMn, ValSD, AroMn, AroSD)
df_ValLowAroLow_1 <- select(df_ValLowAroLow, Word, List, ValMn, ValSD, AroMn, AroSD)
#Write
write.csv(df_ValHighAroHigh_1 , "WordList_ValHighAroHigh.csv")
write.csv(df_ValHighAroLow_1 , "WordList_ValHighAroLow.csv")
write.csv(df_ValLowAroHigh_1 , "WordList_ValLowAroHigh.csv")
write.csv(df_ValLowAroLow_1 , "WordList_ValLowAroLow.csv")
View(MedianCheck_VLAL)
View(MedianCheck_VLAH)
View(MedianCheck_VHAL)
View(MedianCheck_VHAH)
MedianCheck_VLAL$Category <- "LowValenceLowArousal"
View(MedianCheck_VLAL)
MedianCheck_VHAH$Category <- "HighValenceHighArousal"
MedianCheck_VHAL$Category <- "HighValenceLowArousal"
MedianCheck_VLAH$Category <- "LowValenceHighArousal"
MedianCheckAll <- rbind(MedianCheck_VLAL,MedianCheck_VLAH,MedianCheck_VHAL,MedianCheck_VHAH)
View(MedianCheckAll)
View(MedianCheckAll)
